version: 2.0.0.{build}
image: Visual Studio 2019
skip_non_tags: true

dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: '{version}'
  package_version: '{version}'
  assembly_version: '{version}'
  file_version: '{version}'
  informational_version: '{version}'

before_build:
- ps: >-
    nuget restore

build:
  project: C:\projects\dotfeather\dotfeather\dotfeather.csproj
  publish_nuget: true

configuration: Release

after_build:
  - nuget pack -Prop Configuration=Release DotFeather -OutputDirectory DotFeather/bin/Release/

artifacts:
  - path: '**\*.nupkg'
    name: DotFeather

deploy:
- provider: NuGet
  api_key:
    # Use encrypt tool
    # https://ci.appveyor.com/tools/encrypt
    secure: nknIyuf45/JACWB2OAWD32oU6HlW4AkkiI974KwKPPkMh3dRHJXsVQVbN/iIUjg/
  artifact: /.*\.nupkg/
  on:
    appveyor_repo_tag: true
- provider: GitHub
  artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
  draft: false
  prerelease: false
  description: |
    ## 2.0.0 Powerful Renewal Update

    ### 新機能
    - `DFKeyboard` 静的クラスを追加。キーボード入力を受け取るために用います
    - `DFMouse` 静的クラスを追加。マウス入力を受け取るために用います
    - `VectorInt` 構造体を追加。これまでの `Vector` 構造体の整数版であり、`Vector` 構造体に暗黙型変換されます
    - `DotFeather.Router` の機能を統合
      - パスをキーとしてシーンを登録できる新たな API を追加
      - `Scene.Title` プロパティを追加。ウィンドウのタイトルをシーンから取得または設定できます
    - `Container.IsTrimmable` プロパティを追加。コンテナーの占める領域の外にはみ出た描画可能オブジェクトをクリッピングする機能です
    - Random クラスに、ランダムな `VectorInt` 構造体を取得する拡張メソッドを追加
    - `AnimatingSprite` クラスを追加。アニメーションするスプライトを作成できます
    - `AudioPlayer` クラスに、現在の音声再生時間を取得するプロパティを追加
    - `GameBase` クラスに On から始まるフックメソッドに対応するイベントハンドラを追加
    - `GameBase.OnDragDrop`, `GameBase.DragDrop` イベントを追加。ファイルのドラッグドロップを取得できます
    - コンソールレイヤーを追加
      - 簡易的に文字を表示できます。デバッグや簡易ゲーム作成にお使いください
      - `GameBase.Print` メソッドで文字を表示できます
      - `GameBase.Cls` メソッドでコンソールレイヤーをクリアできます
      - `GameBase.ConsoleCursor` プロパティを追加。文字を表示するカーソルの位置を取得または設定できます
      - `GameBase.ConsoleSize` プロパティを追加。コンソールの文字サイズを取得または設定できます
      - `GameBase.ForegroundColor` プロパティを追加。コンソールの描画色を取得または設定できます
    - `RoutingGameBase` クラスを追加
      - ルーターのセットアップおよびゲームの開始が、 `new RoutingGameBase<TypeOfYourFirstScene>(640, 480).Run()` だけで完了します
    - `DFKey.ElapsedTime` プロパティを追加。キーを押されてから経過した時間を秒単位で取得できます
    - `DFKey.ElapsedFrameCount` プロパティを追加。キーを押されてから経過したフレーム数を取得できます
    - `DFKeyboard.GetChar()` メソッドを追加。入力した文字を1文字取得できます
    - `DFKeyboard.GetString()` メソッドを追加。入力した文字を文字列として全て取得できます
    - `DFKeyboard.HasChar()` メソッドを追加。文字がバッファに溜まっているかどうかを取得できます

    ### API 互換性を破壊する変更
    - `Input` クラスは削除されました。代わりに新しい `DFKeyboard` クラス、 `DFMouse` クラスを使用してください
    - `System.Drawing` 名前空間の `Point`, `Size` 構造体は API で使用しなくなりました。代わりに、新しい `VectorInt` 構造体を用いてください
    - .NET Standard 2.1 に依存するようになりました。C# 8 環境では Null 安全になります
    - System.Drawing.Common に依存していた画像処理ロジックを、 `ImageSharp` に変更
      - `Texture2D` のメンバーのうち、内部的に使用されていたものが、この変更により破壊的変更されています
    - `double` 型を用いていた API が、代わりに `float` 型を用いるようになりました

    ### 仕様変更
    - DotFeather ウィンドウがデフォルトでリサイズできない状態になりました
    - using を使用しているコルーチンを強制停止したとき、自動的に `Dispose()` するようになりました
    - finally 句のあるコルーチンを強制停止したとき、中身が実行されるようになりました

    ### バグ修正
    - キャプチャーモードの有効状態に関わらず、常にカレントディレクトリに shot フォルダが生成されるバグを修正
    - `IEnumerator` をイールド命令として使ったときにコルーチンが想定しない動きをするバグを修正
    - Zオーダーの等しいオブジェクトが正しく描画されないバグを修正
    - タイルを1枚のテクスチャを用いて初期化したときに例外が発生するバグを修正
    - `GameBase.TotalFrame` プロパティが、キャプチャモードでない場合更新されないバグを修正

    ### その他
    - 大幅なリファクタリングを行いました
    - API ドキュメントを英語で書き直しました。ドキュメンテーションのローカライズ作業は先の話になりそうです

    ----

    ### New features
    - Added `DFKeyboard` static class to handle keyboard input
    - Added `DFMouse` static class to handle mouse input
    - Added `VectorInt` structure. This is a integer version of `Vector` structure, and it can be casted implicitly to `Vector` structure
    - Integrated features of `DotFeather.Router`
      - Added new api to register scenes by path
      - Added `Scene.Title` property. You can get or set title of the window from the scene
    - Added `Container.IsTrimmable` property to clip drawables outside container's bounding box
    - Add extension method to Random class to get random `VectorInt` structure
    - Added `AnimatingSprite` class to create animated sprites
    - Added a property to `AudioPlayer` class to get current playback time
    - Added event handlers for hook methods starting with "On" to `GameBase` class
    - Added `GameBase.OnDragDrop` method and `GameBase.DragDrop` event to get dragged and dropped file
    - Added console layer
      - It can simply output text. Let's use it for debugging, creating simple game, etc
      - Call `GameBase.Print` method to print text
      - Call `GameBase.Cls` method to clear the console
      - Added `GameBase.ConsoleCursor` property to get or set cursor position to display text
      - Added `GameBase.ConsoleSize` property to get or set text size of the console
      - Added `GameBase.ForegroundColor` property to get or set text color of the console
    - Added `RoutingGameBase` class
      - You can setup the router and run the game easily. Just run `new RoutingGameBase<TypeOfYourFirstScene>(640, 480).Run()`.
    - Added `DFKey.ElapsedTime` property. You can get the time in seconds since the key was pressed
    - Added `DFKey.ElapsedFrameCount` property. You can get the number of frames that have passed since the key was pressed
    - Added `DFKeyboard.GetChar ()` method. You can get a entered character
    - Added `DFKeyboard.GetString ()` method. You can get all entered characters as a string
    - Added `DFKeyboard.HasChar ()` method. You can get whether some characters are in the buffer

    ### API-compatibility breaking changes
    - The `Input` class has been removed. Use the new `DFKeyboard` class and `DFMouse` class instead
    - The `Point` and` Size` structures in the `System.Drawing` namespace are no longer used by the API. Use the new `VectorInt` structure instead
    - Now depends on .NET Standard 2.1. Null safe in C# 8 environment
    - Changed image processing logic that relied on System.Drawing.Common to `ImageSharp`
      - Some of the members of `Texture2D` that were used internally have been destructively changed
    - APIs that used the `double` type now use the`float` type instead

    ### Changes
    - DotFeather window can no longer be resized by default
    - `Dispose()` method will be called automatically when a coroutine using `using` is forcibly stopped
    - Statements in the `finally` clause will be executed when the coroutine forcibly stopped

    ### Bug fixes
    - Fixed a bug that a shot folder is always created in the current directory regardless of whether capture mode is enabled
    - Fixed a bug that coroutine works unexpectedly when use `IEnumerator` as a yield instruction
    - Fixed a bug that objects with the same Z order are not drawn correctly.
    - Fixed a bug that caused an exception when tiles were initialized with a single texture.
    - Fixed a bug that `GameBase.TotalFrame` property is not updated when not in capture mode

    ### Others
    - Refactored very much
    - Rewrote all API documents in English

  auth_token:
    secure: FUlGF4CyRZNM6jaGz2wlmsOIwZt4av2Cxn4lHbi5wU5lim3FixH9ZIhLGDRZftOx
  on:
    APPVEYOR_REPO_TAG: true       # deploy on tag push only
