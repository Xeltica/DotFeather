### YamlMime:ManagedReference
items:
- uid: DotFeather.DFMouse
  commentId: T:DotFeather.DFMouse
  id: DFMouse
  parent: DotFeather
  children:
  - DotFeather.DFMouse.IsLeftClicked
  - DotFeather.DFMouse.IsMiddleClicked
  - DotFeather.DFMouse.IsRightClicked
  - DotFeather.DFMouse.Position
  - DotFeather.DFMouse.Scroll
  langs:
  - csharp
  - vb
  name: DFMouse
  nameWithType: DFMouse
  fullName: DotFeather.DFMouse
  type: Class
  source:
    remote:
      path: DotFeather/InputSystems/DFMouse.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: DFMouse
    path: ../DotFeather/InputSystems/DFMouse.cs
    startLine: 9
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nマウス カーソルの位置、マウスボタンの状態などを取得するクラスです。このクラスは継承できません。\n"
  example: []
  syntax:
    content: public sealed class DFMouse
    content.vb: Public NotInheritable Class DFMouse
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: DotFeather.DFMouse.Position
  commentId: P:DotFeather.DFMouse.Position
  id: Position
  parent: DotFeather.DFMouse
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: DFMouse.Position
  fullName: DotFeather.DFMouse.Position
  type: Property
  source:
    remote:
      path: DotFeather/InputSystems/DFMouse.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: Position
    path: ../DotFeather/InputSystems/DFMouse.cs
    startLine: 15
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nマウスカーソルの座標を取得します。\n"
  example: []
  syntax:
    content: public Point Position { get; }
    parameters: []
    return:
      type: System.Drawing.Point
      description: The position.
    content.vb: Public ReadOnly Property Position As Point
  overload: DotFeather.DFMouse.Position*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotFeather.DFMouse.IsLeftClicked
  commentId: P:DotFeather.DFMouse.IsLeftClicked
  id: IsLeftClicked
  parent: DotFeather.DFMouse
  langs:
  - csharp
  - vb
  name: IsLeftClicked
  nameWithType: DFMouse.IsLeftClicked
  fullName: DotFeather.DFMouse.IsLeftClicked
  type: Property
  source:
    remote:
      path: DotFeather/InputSystems/DFMouse.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: IsLeftClicked
    path: ../DotFeather/InputSystems/DFMouse.cs
    startLine: 21
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n左クリックされているかどうかを示す値を取得または設定します。\n"
  example: []
  syntax:
    content: public bool IsLeftClicked { get; }
    parameters: []
    return:
      type: System.Boolean
      description: 左クリックされている場合は <code>true</code>。それ以外の場合は <code>false</code>。
    content.vb: Public ReadOnly Property IsLeftClicked As Boolean
  overload: DotFeather.DFMouse.IsLeftClicked*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotFeather.DFMouse.IsRightClicked
  commentId: P:DotFeather.DFMouse.IsRightClicked
  id: IsRightClicked
  parent: DotFeather.DFMouse
  langs:
  - csharp
  - vb
  name: IsRightClicked
  nameWithType: DFMouse.IsRightClicked
  fullName: DotFeather.DFMouse.IsRightClicked
  type: Property
  source:
    remote:
      path: DotFeather/InputSystems/DFMouse.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: IsRightClicked
    path: ../DotFeather/InputSystems/DFMouse.cs
    startLine: 27
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n右クリックされているかどうかを示す値を取得または設定します。\n"
  example: []
  syntax:
    content: public bool IsRightClicked { get; }
    parameters: []
    return:
      type: System.Boolean
      description: 右クリックされている場合は <code>true</code>。それ以外の場合は <code>false</code>。
    content.vb: Public ReadOnly Property IsRightClicked As Boolean
  overload: DotFeather.DFMouse.IsRightClicked*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotFeather.DFMouse.IsMiddleClicked
  commentId: P:DotFeather.DFMouse.IsMiddleClicked
  id: IsMiddleClicked
  parent: DotFeather.DFMouse
  langs:
  - csharp
  - vb
  name: IsMiddleClicked
  nameWithType: DFMouse.IsMiddleClicked
  fullName: DotFeather.DFMouse.IsMiddleClicked
  type: Property
  source:
    remote:
      path: DotFeather/InputSystems/DFMouse.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: IsMiddleClicked
    path: ../DotFeather/InputSystems/DFMouse.cs
    startLine: 33
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n中クリックされているかどうかを示す値を取得または設定します。\n"
  example: []
  syntax:
    content: public bool IsMiddleClicked { get; }
    parameters: []
    return:
      type: System.Boolean
      description: 中クリックされている場合は <code>true</code>。それ以外の場合は <code>false</code>。
    content.vb: Public ReadOnly Property IsMiddleClicked As Boolean
  overload: DotFeather.DFMouse.IsMiddleClicked*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotFeather.DFMouse.Scroll
  commentId: P:DotFeather.DFMouse.Scroll
  id: Scroll
  parent: DotFeather.DFMouse
  langs:
  - csharp
  - vb
  name: Scroll
  nameWithType: DFMouse.Scroll
  fullName: DotFeather.DFMouse.Scroll
  type: Property
  source:
    remote:
      path: DotFeather/InputSystems/DFMouse.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: Scroll
    path: ../DotFeather/InputSystems/DFMouse.cs
    startLine: 39
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nマウスホイールのスクロール量を取得します。\n"
  example: []
  syntax:
    content: public (float x, float y)Scroll { get; }
    parameters: []
    return:
      type: System.ValueTuple{System.Single,System.Single}
      description: ''
    content.vb: Public ReadOnly Property Scroll As(x As Single, y As Single)
  overload: DotFeather.DFMouse.Scroll*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: DotFeather
  commentId: N:DotFeather
  name: DotFeather
  nameWithType: DotFeather
  fullName: DotFeather
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotFeather.DFMouse.Position*
  commentId: Overload:DotFeather.DFMouse.Position
  name: Position
  nameWithType: DFMouse.Position
  fullName: DotFeather.DFMouse.Position
- uid: System.Drawing.Point
  commentId: T:System.Drawing.Point
  parent: System.Drawing
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
- uid: DotFeather.DFMouse.IsLeftClicked*
  commentId: Overload:DotFeather.DFMouse.IsLeftClicked
  name: IsLeftClicked
  nameWithType: DFMouse.IsLeftClicked
  fullName: DotFeather.DFMouse.IsLeftClicked
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotFeather.DFMouse.IsRightClicked*
  commentId: Overload:DotFeather.DFMouse.IsRightClicked
  name: IsRightClicked
  nameWithType: DFMouse.IsRightClicked
  fullName: DotFeather.DFMouse.IsRightClicked
- uid: DotFeather.DFMouse.IsMiddleClicked*
  commentId: Overload:DotFeather.DFMouse.IsMiddleClicked
  name: IsMiddleClicked
  nameWithType: DFMouse.IsMiddleClicked
  fullName: DotFeather.DFMouse.IsMiddleClicked
- uid: DotFeather.DFMouse.Scroll*
  commentId: Overload:DotFeather.DFMouse.Scroll
  name: Scroll
  nameWithType: DFMouse.Scroll
  fullName: DotFeather.DFMouse.Scroll
- uid: System.ValueTuple{System.Single,System.Single}
  commentId: T:System.ValueTuple{System.Single,System.Single}
  parent: System
  isExternal: true
  name: ValueTuple<Single, Single>
  nameWithType: ValueTuple<Single, Single>
  fullName: System.ValueTuple<System.Single, System.Single>
  nameWithType.vb: ValueTuple(Of Single, Single)
  fullName.vb: System.ValueTuple(Of System.Single, System.Single)
  name.vb: ValueTuple(Of Single, Single)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
