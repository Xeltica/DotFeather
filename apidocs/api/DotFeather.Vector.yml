### YamlMime:ManagedReference
items:
- uid: DotFeather.Vector
  commentId: T:DotFeather.Vector
  id: Vector
  parent: DotFeather
  children:
  - DotFeather.Vector.#ctor(System.Single,System.Single)
  - DotFeather.Vector.Equals(DotFeather.Vector)
  - DotFeather.Vector.Equals(System.Object)
  - DotFeather.Vector.GetHashCode
  - DotFeather.Vector.One
  - DotFeather.Vector.op_Addition(DotFeather.Vector,DotFeather.Vector)
  - DotFeather.Vector.op_Division(DotFeather.Vector,System.Single)
  - DotFeather.Vector.op_Equality(DotFeather.Vector,DotFeather.Vector)
  - DotFeather.Vector.op_Inequality(DotFeather.Vector,DotFeather.Vector)
  - DotFeather.Vector.op_Multiply(DotFeather.Vector,System.Single)
  - DotFeather.Vector.op_Subtraction(DotFeather.Vector,DotFeather.Vector)
  - DotFeather.Vector.op_UnaryNegation(DotFeather.Vector)
  - DotFeather.Vector.ToString
  - DotFeather.Vector.X
  - DotFeather.Vector.Y
  - DotFeather.Vector.Zero
  langs:
  - csharp
  - vb
  name: Vector
  nameWithType: Vector
  fullName: DotFeather.Vector
  type: Struct
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: Vector
    path: ../DotFeather/Models/Vector.cs
    startLine: 6
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n2次元のベクトルです。\n"
  example: []
  syntax:
    content: 'public struct Vector : IEquatable<Vector>'
    content.vb: >-
      Public Structure Vector

          Implements IEquatable(Of Vector)
  implements:
  - System.IEquatable{DotFeather.Vector}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: DotFeather.Vector.X
  commentId: P:DotFeather.Vector.X
  id: X
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vector.X
  fullName: DotFeather.Vector.X
  type: Property
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: X
    path: ../DotFeather/Models/Vector.cs
    startLine: 11
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nこのベクトルの X 成分を取得または設定します。\n"
  example: []
  syntax:
    content: public float X { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property X As Single
  overload: DotFeather.Vector.X*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotFeather.Vector.Y
  commentId: P:DotFeather.Vector.Y
  id: Y
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vector.Y
  fullName: DotFeather.Vector.Y
  type: Property
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: Y
    path: ../DotFeather/Models/Vector.cs
    startLine: 15
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nこのベクトルの Y 成分を取得または設定します。\n"
  example: []
  syntax:
    content: public float Y { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property Y As Single
  overload: DotFeather.Vector.Y*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotFeather.Vector.#ctor(System.Single,System.Single)
  commentId: M:DotFeather.Vector.#ctor(System.Single,System.Single)
  id: '#ctor(System.Single,System.Single)'
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: Vector(Single, Single)
  nameWithType: Vector.Vector(Single, Single)
  fullName: DotFeather.Vector.Vector(System.Single, System.Single)
  type: Constructor
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: .ctor
    path: ../DotFeather/Models/Vector.cs
    startLine: 22
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n<xref href=\"DotFeather.Vector\" data-throw-if-not-resolved=\"false\"></xref> クラスの新しいインスタンスを初期化します。&quot;\n"
  example: []
  syntax:
    content: public Vector(float x, float y)
    parameters:
    - id: x
      type: System.Single
      description: ''
    - id: y
      type: System.Single
      description: ''
    content.vb: Public Sub New(x As Single, y As Single)
  overload: DotFeather.Vector.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotFeather.Vector.op_Addition(DotFeather.Vector,DotFeather.Vector)
  commentId: M:DotFeather.Vector.op_Addition(DotFeather.Vector,DotFeather.Vector)
  id: op_Addition(DotFeather.Vector,DotFeather.Vector)
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: Addition(Vector, Vector)
  nameWithType: Vector.Addition(Vector, Vector)
  fullName: DotFeather.Vector.Addition(DotFeather.Vector, DotFeather.Vector)
  type: Operator
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: op_Addition
    path: ../DotFeather/Models/Vector.cs
    startLine: 29
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: ''
  example: []
  syntax:
    content: public static Vector operator +(Vector v1, Vector v2)
    parameters:
    - id: v1
      type: DotFeather.Vector
    - id: v2
      type: DotFeather.Vector
    return:
      type: DotFeather.Vector
    content.vb: Public Shared Operator +(v1 As Vector, v2 As Vector) As Vector
  overload: DotFeather.Vector.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotFeather.Vector.op_Subtraction(DotFeather.Vector,DotFeather.Vector)
  commentId: M:DotFeather.Vector.op_Subtraction(DotFeather.Vector,DotFeather.Vector)
  id: op_Subtraction(DotFeather.Vector,DotFeather.Vector)
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: Subtraction(Vector, Vector)
  nameWithType: Vector.Subtraction(Vector, Vector)
  fullName: DotFeather.Vector.Subtraction(DotFeather.Vector, DotFeather.Vector)
  type: Operator
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: op_Subtraction
    path: ../DotFeather/Models/Vector.cs
    startLine: 31
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: ''
  example: []
  syntax:
    content: public static Vector operator -(Vector v1, Vector v2)
    parameters:
    - id: v1
      type: DotFeather.Vector
    - id: v2
      type: DotFeather.Vector
    return:
      type: DotFeather.Vector
    content.vb: Public Shared Operator -(v1 As Vector, v2 As Vector) As Vector
  overload: DotFeather.Vector.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotFeather.Vector.op_Multiply(DotFeather.Vector,System.Single)
  commentId: M:DotFeather.Vector.op_Multiply(DotFeather.Vector,System.Single)
  id: op_Multiply(DotFeather.Vector,System.Single)
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector, Single)
  nameWithType: Vector.Multiply(Vector, Single)
  fullName: DotFeather.Vector.Multiply(DotFeather.Vector, System.Single)
  type: Operator
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: op_Multiply
    path: ../DotFeather/Models/Vector.cs
    startLine: 33
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: ''
  example: []
  syntax:
    content: public static Vector operator *(Vector v1, float v2)
    parameters:
    - id: v1
      type: DotFeather.Vector
    - id: v2
      type: System.Single
    return:
      type: DotFeather.Vector
    content.vb: Public Shared Operator *(v1 As Vector, v2 As Single) As Vector
  overload: DotFeather.Vector.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotFeather.Vector.op_Division(DotFeather.Vector,System.Single)
  commentId: M:DotFeather.Vector.op_Division(DotFeather.Vector,System.Single)
  id: op_Division(DotFeather.Vector,System.Single)
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: Division(Vector, Single)
  nameWithType: Vector.Division(Vector, Single)
  fullName: DotFeather.Vector.Division(DotFeather.Vector, System.Single)
  type: Operator
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: op_Division
    path: ../DotFeather/Models/Vector.cs
    startLine: 35
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: ''
  example: []
  syntax:
    content: public static Vector operator /(Vector v1, float v2)
    parameters:
    - id: v1
      type: DotFeather.Vector
    - id: v2
      type: System.Single
    return:
      type: DotFeather.Vector
    content.vb: Public Shared Operator /(v1 As Vector, v2 As Single) As Vector
  overload: DotFeather.Vector.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotFeather.Vector.op_UnaryNegation(DotFeather.Vector)
  commentId: M:DotFeather.Vector.op_UnaryNegation(DotFeather.Vector)
  id: op_UnaryNegation(DotFeather.Vector)
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: UnaryNegation(Vector)
  nameWithType: Vector.UnaryNegation(Vector)
  fullName: DotFeather.Vector.UnaryNegation(DotFeather.Vector)
  type: Operator
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: op_UnaryNegation
    path: ../DotFeather/Models/Vector.cs
    startLine: 37
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: ''
  example: []
  syntax:
    content: public static Vector operator -(Vector v1)
    parameters:
    - id: v1
      type: DotFeather.Vector
    return:
      type: DotFeather.Vector
    content.vb: Public Shared Operator -(v1 As Vector) As Vector
  overload: DotFeather.Vector.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotFeather.Vector.op_Equality(DotFeather.Vector,DotFeather.Vector)
  commentId: M:DotFeather.Vector.op_Equality(DotFeather.Vector,DotFeather.Vector)
  id: op_Equality(DotFeather.Vector,DotFeather.Vector)
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: Equality(Vector, Vector)
  nameWithType: Vector.Equality(Vector, Vector)
  fullName: DotFeather.Vector.Equality(DotFeather.Vector, DotFeather.Vector)
  type: Operator
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: op_Equality
    path: ../DotFeather/Models/Vector.cs
    startLine: 41
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: ''
  example: []
  syntax:
    content: public static bool operator ==(Vector v1, Vector v2)
    parameters:
    - id: v1
      type: DotFeather.Vector
    - id: v2
      type: DotFeather.Vector
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(v1 As Vector, v2 As Vector) As Boolean
  overload: DotFeather.Vector.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotFeather.Vector.op_Inequality(DotFeather.Vector,DotFeather.Vector)
  commentId: M:DotFeather.Vector.op_Inequality(DotFeather.Vector,DotFeather.Vector)
  id: op_Inequality(DotFeather.Vector,DotFeather.Vector)
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: Inequality(Vector, Vector)
  nameWithType: Vector.Inequality(Vector, Vector)
  fullName: DotFeather.Vector.Inequality(DotFeather.Vector, DotFeather.Vector)
  type: Operator
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: op_Inequality
    path: ../DotFeather/Models/Vector.cs
    startLine: 43
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: ''
  example: []
  syntax:
    content: public static bool operator !=(Vector v1, Vector v2)
    parameters:
    - id: v1
      type: DotFeather.Vector
    - id: v2
      type: DotFeather.Vector
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(v1 As Vector, v2 As Vector) As Boolean
  overload: DotFeather.Vector.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotFeather.Vector.Equals(System.Object)
  commentId: M:DotFeather.Vector.Equals(System.Object)
  id: Equals(System.Object)
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Vector.Equals(Object)
  fullName: DotFeather.Vector.Equals(System.Object)
  type: Method
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: Equals
    path: ../DotFeather/Models/Vector.cs
    startLine: 48
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nこのオブジェクトを比較します。\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: DotFeather.Vector.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: DotFeather.Vector.Equals(DotFeather.Vector)
  commentId: M:DotFeather.Vector.Equals(DotFeather.Vector)
  id: Equals(DotFeather.Vector)
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: Equals(Vector)
  nameWithType: Vector.Equals(Vector)
  fullName: DotFeather.Vector.Equals(DotFeather.Vector)
  type: Method
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: Equals
    path: ../DotFeather/Models/Vector.cs
    startLine: 56
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nこのオブジェクトを比較します。\n"
  example: []
  syntax:
    content: public bool Equals(Vector other)
    parameters:
    - id: other
      type: DotFeather.Vector
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As Vector) As Boolean
  overload: DotFeather.Vector.Equals*
  implements:
  - System.IEquatable{DotFeather.Vector}.Equals(DotFeather.Vector)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotFeather.Vector.GetHashCode
  commentId: M:DotFeather.Vector.GetHashCode
  id: GetHashCode
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Vector.GetHashCode()
  fullName: DotFeather.Vector.GetHashCode()
  type: Method
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: GetHashCode
    path: ../DotFeather/Models/Vector.cs
    startLine: 66
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nこのオブジェクトのハッシュ値を取得します。\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: DotFeather.Vector.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: DotFeather.Vector.ToString
  commentId: M:DotFeather.Vector.ToString
  id: ToString
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector.ToString()
  fullName: DotFeather.Vector.ToString()
  type: Method
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: ToString
    path: ../DotFeather/Models/Vector.cs
    startLine: 77
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nこのベクトルの文字列表現を取得します。\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: DotFeather.Vector.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: DotFeather.Vector.Zero
  commentId: F:DotFeather.Vector.Zero
  id: Zero
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Vector.Zero
  fullName: DotFeather.Vector.Zero
  type: Field
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: Zero
    path: ../DotFeather/Models/Vector.cs
    startLine: 82
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n<code>new Vector(0, 0)</code> を取得します。\n"
  example: []
  syntax:
    content: public static readonly Vector Zero
    return:
      type: DotFeather.Vector
    content.vb: Public Shared ReadOnly Zero As Vector
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: DotFeather.Vector.One
  commentId: F:DotFeather.Vector.One
  id: One
  parent: DotFeather.Vector
  langs:
  - csharp
  - vb
  name: One
  nameWithType: Vector.One
  fullName: DotFeather.Vector.One
  type: Field
  source:
    remote:
      path: DotFeather/Models/Vector.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: One
    path: ../DotFeather/Models/Vector.cs
    startLine: 87
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n<code>new Vector(1, 1)</code> を取得します。\n"
  example: []
  syntax:
    content: public static readonly Vector One
    return:
      type: DotFeather.Vector
    content.vb: Public Shared ReadOnly One As Vector
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: DotFeather
  commentId: N:DotFeather
  name: DotFeather
  nameWithType: DotFeather
  fullName: DotFeather
- uid: System.IEquatable{DotFeather.Vector}
  commentId: T:System.IEquatable{DotFeather.Vector}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Vector>
  nameWithType: IEquatable<Vector>
  fullName: System.IEquatable<DotFeather.Vector>
  nameWithType.vb: IEquatable(Of Vector)
  fullName.vb: System.IEquatable(Of DotFeather.Vector)
  name.vb: IEquatable(Of Vector)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DotFeather.Vector
    name: Vector
    nameWithType: Vector
    fullName: DotFeather.Vector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DotFeather.Vector
    name: Vector
    nameWithType: Vector
    fullName: DotFeather.Vector
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DotFeather.Vector.X*
  commentId: Overload:DotFeather.Vector.X
  name: X
  nameWithType: Vector.X
  fullName: DotFeather.Vector.X
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: DotFeather.Vector.Y*
  commentId: Overload:DotFeather.Vector.Y
  name: Y
  nameWithType: Vector.Y
  fullName: DotFeather.Vector.Y
- uid: DotFeather.Vector
  commentId: T:DotFeather.Vector
  parent: DotFeather
  name: Vector
  nameWithType: Vector
  fullName: DotFeather.Vector
- uid: DotFeather.Vector.#ctor*
  commentId: Overload:DotFeather.Vector.#ctor
  name: Vector
  nameWithType: Vector.Vector
  fullName: DotFeather.Vector.Vector
- uid: DotFeather.Vector.op_Addition*
  commentId: Overload:DotFeather.Vector.op_Addition
  name: Addition
  nameWithType: Vector.Addition
  fullName: DotFeather.Vector.Addition
- uid: DotFeather.Vector.op_Subtraction*
  commentId: Overload:DotFeather.Vector.op_Subtraction
  name: Subtraction
  nameWithType: Vector.Subtraction
  fullName: DotFeather.Vector.Subtraction
- uid: DotFeather.Vector.op_Multiply*
  commentId: Overload:DotFeather.Vector.op_Multiply
  name: Multiply
  nameWithType: Vector.Multiply
  fullName: DotFeather.Vector.Multiply
- uid: DotFeather.Vector.op_Division*
  commentId: Overload:DotFeather.Vector.op_Division
  name: Division
  nameWithType: Vector.Division
  fullName: DotFeather.Vector.Division
- uid: DotFeather.Vector.op_UnaryNegation*
  commentId: Overload:DotFeather.Vector.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Vector.UnaryNegation
  fullName: DotFeather.Vector.UnaryNegation
- uid: DotFeather.Vector.op_Equality*
  commentId: Overload:DotFeather.Vector.op_Equality
  name: Equality
  nameWithType: Vector.Equality
  fullName: DotFeather.Vector.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotFeather.Vector.op_Inequality*
  commentId: Overload:DotFeather.Vector.op_Inequality
  name: Inequality
  nameWithType: Vector.Inequality
  fullName: DotFeather.Vector.Inequality
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotFeather.Vector.Equals*
  commentId: Overload:DotFeather.Vector.Equals
  name: Equals
  nameWithType: Vector.Equals
  fullName: DotFeather.Vector.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.IEquatable{DotFeather.Vector}.Equals(DotFeather.Vector)
  commentId: M:System.IEquatable{DotFeather.Vector}.Equals(DotFeather.Vector)
  parent: System.IEquatable{DotFeather.Vector}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Vector)
  nameWithType: IEquatable<Vector>.Equals(Vector)
  fullName: System.IEquatable<DotFeather.Vector>.Equals(DotFeather.Vector)
  nameWithType.vb: IEquatable(Of Vector).Equals(Vector)
  fullName.vb: System.IEquatable(Of DotFeather.Vector).Equals(DotFeather.Vector)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Vector>.Equals
    fullName: System.IEquatable<DotFeather.Vector>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: DotFeather.Vector
    name: Vector
    nameWithType: Vector
    fullName: DotFeather.Vector
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Vector).Equals
    fullName: System.IEquatable(Of DotFeather.Vector).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: DotFeather.Vector
    name: Vector
    nameWithType: Vector
    fullName: DotFeather.Vector
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DotFeather.Vector.GetHashCode*
  commentId: Overload:DotFeather.Vector.GetHashCode
  name: GetHashCode
  nameWithType: Vector.GetHashCode
  fullName: DotFeather.Vector.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DotFeather.Vector.ToString*
  commentId: Overload:DotFeather.Vector.ToString
  name: ToString
  nameWithType: Vector.ToString
  fullName: DotFeather.Vector.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
