### YamlMime:ManagedReference
items:
- uid: DotFeather.Graphic
  commentId: T:DotFeather.Graphic
  id: Graphic
  parent: DotFeather
  children:
  - DotFeather.Graphic.Angle
  - DotFeather.Graphic.Clear
  - DotFeather.Graphic.Destroy
  - DotFeather.Graphic.Draw(DotFeather.GameBase,DotFeather.Vector)
  - DotFeather.Graphic.Drawables
  - DotFeather.Graphic.Ellipse(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  - DotFeather.Graphic.Ellipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  - DotFeather.Graphic.Line(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color)
  - DotFeather.Graphic.Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)
  - DotFeather.Graphic.Location
  - DotFeather.Graphic.Name
  - DotFeather.Graphic.Pixel(System.Drawing.Point,System.Drawing.Color)
  - DotFeather.Graphic.Pixel(System.Int32,System.Int32,System.Drawing.Color)
  - DotFeather.Graphic.Rect(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  - DotFeather.Graphic.Rect(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  - DotFeather.Graphic.Scale
  - DotFeather.Graphic.Texture(System.Int32,System.Int32,DotFeather.Texture2D)
  - DotFeather.Graphic.Triangle(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  - DotFeather.Graphic.Triangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  - DotFeather.Graphic.ZOrder
  langs:
  - csharp
  - vb
  name: Graphic
  nameWithType: Graphic
  fullName: DotFeather.Graphic
  type: Class
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Graphic
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 11
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n図形描画を行える、グラフィック用のレイヤーです。\n"
  example: []
  syntax:
    content: 'public class Graphic : IDrawable'
    content.vb: >-
      Public Class Graphic

          Implements IDrawable
  inheritance:
  - System.Object
  implements:
  - DotFeather.IDrawable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DotFeather.Graphic.Drawables
  commentId: P:DotFeather.Graphic.Drawables
  id: Drawables
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Drawables
  nameWithType: Graphic.Drawables
  fullName: DotFeather.Graphic.Drawables
  type: Property
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Drawables
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 17
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n現在の <xref href=\"DotFeather.Graphic\" data-throw-if-not-resolved=\"false\"></xref> が持つ描画オブジェクトのリストを取得します。\n"
  example: []
  syntax:
    content: public List<IDrawable> Drawables { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{DotFeather.IDrawable}
      description: 描画可能オブジェクトのリスト。
    content.vb: Public ReadOnly Property Drawables As List(Of IDrawable)
  overload: DotFeather.Graphic.Drawables*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotFeather.Graphic.Location
  commentId: P:DotFeather.Graphic.Location
  id: Location
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: Graphic.Location
  fullName: DotFeather.Graphic.Location
  type: Property
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Location
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 20
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: ''
  example: []
  syntax:
    content: public Vector Location { get; set; }
    parameters: []
    return:
      type: DotFeather.Vector
    content.vb: Public Property Location As Vector
  overload: DotFeather.Graphic.Location*
  implements:
  - DotFeather.IDrawable.Location
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotFeather.Graphic.Angle
  commentId: P:DotFeather.Graphic.Angle
  id: Angle
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Angle
  nameWithType: Graphic.Angle
  fullName: DotFeather.Graphic.Angle
  type: Property
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Angle
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 22
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: ''
  example: []
  syntax:
    content: public float Angle { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property Angle As Single
  overload: DotFeather.Graphic.Angle*
  implements:
  - DotFeather.IDrawable.Angle
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotFeather.Graphic.Scale
  commentId: P:DotFeather.Graphic.Scale
  id: Scale
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Scale
  nameWithType: Graphic.Scale
  fullName: DotFeather.Graphic.Scale
  type: Property
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Scale
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 24
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: ''
  example: []
  syntax:
    content: public Vector Scale { get; set; }
    parameters: []
    return:
      type: DotFeather.Vector
    content.vb: Public Property Scale As Vector
  overload: DotFeather.Graphic.Scale*
  implements:
  - DotFeather.IDrawable.Scale
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotFeather.Graphic.ZOrder
  commentId: P:DotFeather.Graphic.ZOrder
  id: ZOrder
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: ZOrder
  nameWithType: Graphic.ZOrder
  fullName: DotFeather.Graphic.ZOrder
  type: Property
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: ZOrder
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 26
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: ''
  example: []
  syntax:
    content: public int ZOrder { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property ZOrder As Integer
  overload: DotFeather.Graphic.ZOrder*
  implements:
  - DotFeather.IDrawable.ZOrder
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotFeather.Graphic.Name
  commentId: P:DotFeather.Graphic.Name
  id: Name
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Graphic.Name
  fullName: DotFeather.Graphic.Name
  type: Property
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Name
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 28
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: ''
  example: []
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: DotFeather.Graphic.Name*
  implements:
  - DotFeather.IDrawable.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotFeather.Graphic.Draw(DotFeather.GameBase,DotFeather.Vector)
  commentId: M:DotFeather.Graphic.Draw(DotFeather.GameBase,DotFeather.Vector)
  id: Draw(DotFeather.GameBase,DotFeather.Vector)
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Draw(GameBase, Vector)
  nameWithType: Graphic.Draw(GameBase, Vector)
  fullName: DotFeather.Graphic.Draw(DotFeather.GameBase, DotFeather.Vector)
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Draw
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 33
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n実際に画面へ描画を行います。\n"
  example: []
  syntax:
    content: public void Draw(GameBase game, Vector location)
    parameters:
    - id: game
      type: DotFeather.GameBase
    - id: location
      type: DotFeather.Vector
    content.vb: Public Sub Draw(game As GameBase, location As Vector)
  overload: DotFeather.Graphic.Draw*
  implements:
  - DotFeather.IDrawable.Draw(DotFeather.GameBase,DotFeather.Vector)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotFeather.Graphic.Pixel(System.Drawing.Point,System.Drawing.Color)
  commentId: M:DotFeather.Graphic.Pixel(System.Drawing.Point,System.Drawing.Color)
  id: Pixel(System.Drawing.Point,System.Drawing.Color)
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Pixel(Point, Color)
  nameWithType: Graphic.Pixel(Point, Color)
  fullName: DotFeather.Graphic.Pixel(System.Drawing.Point, System.Drawing.Color)
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Pixel
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 48
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n点を描画します。\n"
  example: []
  syntax:
    content: public Graphic Pixel(Point pos, Color color)
    parameters:
    - id: pos
      type: System.Drawing.Point
      description: 座標.
    - id: color
      type: System.Drawing.Color
      description: 色.
    return:
      type: DotFeather.Graphic
    content.vb: Public Function Pixel(pos As Point, color As Color) As Graphic
  overload: DotFeather.Graphic.Pixel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotFeather.Graphic.Pixel(System.Int32,System.Int32,System.Drawing.Color)
  commentId: M:DotFeather.Graphic.Pixel(System.Int32,System.Int32,System.Drawing.Color)
  id: Pixel(System.Int32,System.Int32,System.Drawing.Color)
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Pixel(Int32, Int32, Color)
  nameWithType: Graphic.Pixel(Int32, Int32, Color)
  fullName: DotFeather.Graphic.Pixel(System.Int32, System.Int32, System.Drawing.Color)
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Pixel
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 60
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n点を描画します。\n"
  example: []
  syntax:
    content: public Graphic Pixel(int x, int y, Color color)
    parameters:
    - id: x
      type: System.Int32
      description: Z座標。
    - id: y
      type: System.Int32
      description: Y座標。
    - id: color
      type: System.Drawing.Color
      description: 色.
    return:
      type: DotFeather.Graphic
    content.vb: Public Function Pixel(x As Integer, y As Integer, color As Color) As Graphic
  overload: DotFeather.Graphic.Pixel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotFeather.Graphic.Line(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color)
  commentId: M:DotFeather.Graphic.Line(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color)
  id: Line(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color)
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Line(Point, Point, Color)
  nameWithType: Graphic.Line(Point, Point, Color)
  fullName: DotFeather.Graphic.Line(System.Drawing.Point, System.Drawing.Point, System.Drawing.Color)
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Line
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 71
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n線を描画します。\n"
  example: []
  syntax:
    content: public Graphic Line(Point begin, Point end, Color color)
    parameters:
    - id: begin
      type: System.Drawing.Point
      description: 始点の座標.
    - id: end
      type: System.Drawing.Point
      description: 終点の座標.
    - id: color
      type: System.Drawing.Color
      description: 色.
    return:
      type: DotFeather.Graphic
    content.vb: Public Function Line(begin As Point, end As Point, color As Color) As Graphic
  overload: DotFeather.Graphic.Line*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotFeather.Graphic.Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)
  commentId: M:DotFeather.Graphic.Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)
  id: Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Line(Int32, Int32, Int32, Int32, Color)
  nameWithType: Graphic.Line(Int32, Int32, Int32, Int32, Color)
  fullName: DotFeather.Graphic.Line(System.Int32, System.Int32, System.Int32, System.Int32, System.Drawing.Color)
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Line
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 85
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n線を描画します。\n"
  example: []
  syntax:
    content: public Graphic Line(int x1, int y1, int x2, int y2, Color color)
    parameters:
    - id: x1
      type: System.Int32
      description: 始点のX座標。
    - id: y1
      type: System.Int32
      description: 始点のY座標。
    - id: x2
      type: System.Int32
      description: 終点のX座標。
    - id: y2
      type: System.Int32
      description: 終点のX座標。
    - id: color
      type: System.Drawing.Color
      description: 色.
    return:
      type: DotFeather.Graphic
    content.vb: Public Function Line(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, color As Color) As Graphic
  overload: DotFeather.Graphic.Line*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotFeather.Graphic.Rect(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  commentId: M:DotFeather.Graphic.Rect(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  id: Rect(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Rect(Point, Point, Color, Int32, Nullable<Color>)
  nameWithType: Graphic.Rect(Point, Point, Color, Int32, Nullable<Color>)
  fullName: DotFeather.Graphic.Rect(System.Drawing.Point, System.Drawing.Point, System.Drawing.Color, System.Int32, System.Nullable<System.Drawing.Color>)
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Rect
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 98
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n矩形を描画します。\n"
  example: []
  syntax:
    content: public Graphic Rect(Point begin, Point end, Color color, int lineWidth = 0, Color? lineColor = default(Color? ))
    parameters:
    - id: begin
      type: System.Drawing.Point
      description: 始点の座標.
    - id: end
      type: System.Drawing.Point
      description: 終点の座標.
    - id: color
      type: System.Drawing.Color
      description: 色.
    - id: lineWidth
      type: System.Int32
      description: 線の幅。
    - id: lineColor
      type: System.Nullable{System.Drawing.Color}
      description: 線の色。
    return:
      type: DotFeather.Graphic
    content.vb: Public Function Rect(begin As Point, end As Point, color As Color, lineWidth As Integer = 0, lineColor As Color? = Nothing) As Graphic
  overload: DotFeather.Graphic.Rect*
  nameWithType.vb: Graphic.Rect(Point, Point, Color, Int32, Nullable(Of Color))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotFeather.Graphic.Rect(System.Drawing.Point, System.Drawing.Point, System.Drawing.Color, System.Int32, System.Nullable(Of System.Drawing.Color))
  name.vb: Rect(Point, Point, Color, Int32, Nullable(Of Color))
- uid: DotFeather.Graphic.Rect(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  commentId: M:DotFeather.Graphic.Rect(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  id: Rect(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Rect(Int32, Int32, Int32, Int32, Color, Int32, Nullable<Color>)
  nameWithType: Graphic.Rect(Int32, Int32, Int32, Int32, Color, Int32, Nullable<Color>)
  fullName: DotFeather.Graphic.Rect(System.Int32, System.Int32, System.Int32, System.Int32, System.Drawing.Color, System.Int32, System.Nullable<System.Drawing.Color>)
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Rect
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 113
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n矩形を描画します。\n"
  example: []
  syntax:
    content: public Graphic Rect(int x1, int y1, int x2, int y2, Color color, int lineWidth = 0, Color? lineColor = default(Color? ))
    parameters:
    - id: x1
      type: System.Int32
      description: 始点のX座標。
    - id: y1
      type: System.Int32
      description: 始点のY座標。
    - id: x2
      type: System.Int32
      description: 終点のX座標。
    - id: y2
      type: System.Int32
      description: 終点のX座標。
    - id: color
      type: System.Drawing.Color
      description: 色.
    - id: lineWidth
      type: System.Int32
      description: 線の幅。
    - id: lineColor
      type: System.Nullable{System.Drawing.Color}
      description: 線の色。
    return:
      type: DotFeather.Graphic
    content.vb: Public Function Rect(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, color As Color, lineWidth As Integer = 0, lineColor As Color? = Nothing) As Graphic
  overload: DotFeather.Graphic.Rect*
  nameWithType.vb: Graphic.Rect(Int32, Int32, Int32, Int32, Color, Int32, Nullable(Of Color))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotFeather.Graphic.Rect(System.Int32, System.Int32, System.Int32, System.Int32, System.Drawing.Color, System.Int32, System.Nullable(Of System.Drawing.Color))
  name.vb: Rect(Int32, Int32, Int32, Int32, Color, Int32, Nullable(Of Color))
- uid: DotFeather.Graphic.Triangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  commentId: M:DotFeather.Graphic.Triangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  id: Triangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Triangle(Int32, Int32, Int32, Int32, Int32, Int32, Color, Int32, Nullable<Color>)
  nameWithType: Graphic.Triangle(Int32, Int32, Int32, Int32, Int32, Int32, Color, Int32, Nullable<Color>)
  fullName: DotFeather.Graphic.Triangle(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Drawing.Color, System.Int32, System.Nullable<System.Drawing.Color>)
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Triangle
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 126
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n三角形を描画します。\n"
  example: []
  syntax:
    content: public Graphic Triangle(int x1, int y1, int x2, int y2, int x3, int y3, Color color, int lineWidth = 0, Color? lineColor = default(Color? ))
    parameters:
    - id: x1
      type: System.Int32
    - id: y1
      type: System.Int32
    - id: x2
      type: System.Int32
    - id: y2
      type: System.Int32
    - id: x3
      type: System.Int32
    - id: y3
      type: System.Int32
    - id: color
      type: System.Drawing.Color
    - id: lineWidth
      type: System.Int32
    - id: lineColor
      type: System.Nullable{System.Drawing.Color}
    return:
      type: DotFeather.Graphic
    content.vb: Public Function Triangle(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, color As Color, lineWidth As Integer = 0, lineColor As Color? = Nothing) As Graphic
  overload: DotFeather.Graphic.Triangle*
  nameWithType.vb: Graphic.Triangle(Int32, Int32, Int32, Int32, Int32, Int32, Color, Int32, Nullable(Of Color))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotFeather.Graphic.Triangle(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Drawing.Color, System.Int32, System.Nullable(Of System.Drawing.Color))
  name.vb: Triangle(Int32, Int32, Int32, Int32, Int32, Int32, Color, Int32, Nullable(Of Color))
- uid: DotFeather.Graphic.Triangle(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  commentId: M:DotFeather.Graphic.Triangle(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  id: Triangle(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Triangle(Point, Point, Point, Color, Int32, Nullable<Color>)
  nameWithType: Graphic.Triangle(Point, Point, Point, Color, Int32, Nullable<Color>)
  fullName: DotFeather.Graphic.Triangle(System.Drawing.Point, System.Drawing.Point, System.Drawing.Point, System.Drawing.Color, System.Int32, System.Nullable<System.Drawing.Color>)
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Triangle
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 138
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n三角形を描画します。\n"
  example: []
  syntax:
    content: public Graphic Triangle(Point p1, Point p2, Point p3, Color color, int lineWidth = 0, Color? lineColor = default(Color? ))
    parameters:
    - id: p1
      type: System.Drawing.Point
    - id: p2
      type: System.Drawing.Point
    - id: p3
      type: System.Drawing.Point
    - id: color
      type: System.Drawing.Color
    - id: lineWidth
      type: System.Int32
    - id: lineColor
      type: System.Nullable{System.Drawing.Color}
    return:
      type: DotFeather.Graphic
    content.vb: Public Function Triangle(p1 As Point, p2 As Point, p3 As Point, color As Color, lineWidth As Integer = 0, lineColor As Color? = Nothing) As Graphic
  overload: DotFeather.Graphic.Triangle*
  nameWithType.vb: Graphic.Triangle(Point, Point, Point, Color, Int32, Nullable(Of Color))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotFeather.Graphic.Triangle(System.Drawing.Point, System.Drawing.Point, System.Drawing.Point, System.Drawing.Color, System.Int32, System.Nullable(Of System.Drawing.Color))
  name.vb: Triangle(Point, Point, Point, Color, Int32, Nullable(Of Color))
- uid: DotFeather.Graphic.Ellipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  commentId: M:DotFeather.Graphic.Ellipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  id: Ellipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Ellipse(Int32, Int32, Int32, Int32, Color, Int32, Nullable<Color>)
  nameWithType: Graphic.Ellipse(Int32, Int32, Int32, Int32, Color, Int32, Nullable<Color>)
  fullName: DotFeather.Graphic.Ellipse(System.Int32, System.Int32, System.Int32, System.Int32, System.Drawing.Color, System.Int32, System.Nullable<System.Drawing.Color>)
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Ellipse
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 146
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n楕円を描画します。\n"
  example: []
  syntax:
    content: public Graphic Ellipse(int x1, int y1, int x2, int y2, Color color, int lineWidth = 0, Color? lineColor = default(Color? ))
    parameters:
    - id: x1
      type: System.Int32
    - id: y1
      type: System.Int32
    - id: x2
      type: System.Int32
    - id: y2
      type: System.Int32
    - id: color
      type: System.Drawing.Color
    - id: lineWidth
      type: System.Int32
    - id: lineColor
      type: System.Nullable{System.Drawing.Color}
    return:
      type: DotFeather.Graphic
    content.vb: Public Function Ellipse(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, color As Color, lineWidth As Integer = 0, lineColor As Color? = Nothing) As Graphic
  overload: DotFeather.Graphic.Ellipse*
  nameWithType.vb: Graphic.Ellipse(Int32, Int32, Int32, Int32, Color, Int32, Nullable(Of Color))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotFeather.Graphic.Ellipse(System.Int32, System.Int32, System.Int32, System.Int32, System.Drawing.Color, System.Int32, System.Nullable(Of System.Drawing.Color))
  name.vb: Ellipse(Int32, Int32, Int32, Int32, Color, Int32, Nullable(Of Color))
- uid: DotFeather.Graphic.Ellipse(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  commentId: M:DotFeather.Graphic.Ellipse(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  id: Ellipse(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,System.Nullable{System.Drawing.Color})
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Ellipse(Point, Point, Color, Int32, Nullable<Color>)
  nameWithType: Graphic.Ellipse(Point, Point, Color, Int32, Nullable<Color>)
  fullName: DotFeather.Graphic.Ellipse(System.Drawing.Point, System.Drawing.Point, System.Drawing.Color, System.Int32, System.Nullable<System.Drawing.Color>)
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Ellipse
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 177
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n楕円を描画します。\n"
  example: []
  syntax:
    content: public Graphic Ellipse(Point p1, Point p2, Color color, int lineWidth = 0, Color? lineColor = default(Color? ))
    parameters:
    - id: p1
      type: System.Drawing.Point
    - id: p2
      type: System.Drawing.Point
    - id: color
      type: System.Drawing.Color
    - id: lineWidth
      type: System.Int32
    - id: lineColor
      type: System.Nullable{System.Drawing.Color}
    return:
      type: DotFeather.Graphic
    content.vb: Public Function Ellipse(p1 As Point, p2 As Point, color As Color, lineWidth As Integer = 0, lineColor As Color? = Nothing) As Graphic
  overload: DotFeather.Graphic.Ellipse*
  nameWithType.vb: Graphic.Ellipse(Point, Point, Color, Int32, Nullable(Of Color))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotFeather.Graphic.Ellipse(System.Drawing.Point, System.Drawing.Point, System.Drawing.Color, System.Int32, System.Nullable(Of System.Drawing.Color))
  name.vb: Ellipse(Point, Point, Color, Int32, Nullable(Of Color))
- uid: DotFeather.Graphic.Texture(System.Int32,System.Int32,DotFeather.Texture2D)
  commentId: M:DotFeather.Graphic.Texture(System.Int32,System.Int32,DotFeather.Texture2D)
  id: Texture(System.Int32,System.Int32,DotFeather.Texture2D)
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Texture(Int32, Int32, Texture2D)
  nameWithType: Graphic.Texture(Int32, Int32, Texture2D)
  fullName: DotFeather.Graphic.Texture(System.Int32, System.Int32, DotFeather.Texture2D)
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Texture
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 188
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nテクスチャを描画します。\n"
  example: []
  syntax:
    content: public Graphic Texture(int x, int y, Texture2D texture)
    parameters:
    - id: x
      type: System.Int32
      description: The first x value.
    - id: y
      type: System.Int32
      description: The first y value.
    - id: texture
      type: DotFeather.Texture2D
      description: テクスチャ。
    return:
      type: DotFeather.Graphic
    content.vb: Public Function Texture(x As Integer, y As Integer, texture As Texture2D) As Graphic
  overload: DotFeather.Graphic.Texture*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotFeather.Graphic.Clear
  commentId: M:DotFeather.Graphic.Clear
  id: Clear
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Graphic.Clear()
  fullName: DotFeather.Graphic.Clear()
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Clear
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 197
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nこのグラフィックレイヤーを削除します。\n"
  example: []
  syntax:
    content: public Graphic Clear()
    return:
      type: DotFeather.Graphic
    content.vb: Public Function Clear As Graphic
  overload: DotFeather.Graphic.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotFeather.Graphic.Destroy
  commentId: M:DotFeather.Graphic.Destroy
  id: Destroy
  parent: DotFeather.Graphic
  langs:
  - csharp
  - vb
  name: Destroy()
  nameWithType: Graphic.Destroy()
  fullName: DotFeather.Graphic.Destroy()
  type: Method
  source:
    remote:
      path: DotFeather/Graphics/Graphic.cs
      branch: master
      repo: https://github.com/xeltica/dotfeather
    id: Destroy
    path: ../DotFeather/Graphics/Graphic.cs
    startLine: 207
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nこの <xref href=\"DotFeather.Graphic\" data-throw-if-not-resolved=\"false\"></xref> を削除します。\n"
  example: []
  syntax:
    content: public void Destroy()
    content.vb: Public Sub Destroy
  overload: DotFeather.Graphic.Destroy*
  implements:
  - DotFeather.IDrawable.Destroy
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: DotFeather
  commentId: N:DotFeather
  name: DotFeather
  nameWithType: DotFeather
  fullName: DotFeather
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DotFeather.IDrawable
  commentId: T:DotFeather.IDrawable
  parent: DotFeather
  name: IDrawable
  nameWithType: IDrawable
  fullName: DotFeather.IDrawable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotFeather.Graphic
  commentId: T:DotFeather.Graphic
  parent: DotFeather
  name: Graphic
  nameWithType: Graphic
  fullName: DotFeather.Graphic
- uid: DotFeather.Graphic.Drawables*
  commentId: Overload:DotFeather.Graphic.Drawables
  name: Drawables
  nameWithType: Graphic.Drawables
  fullName: DotFeather.Graphic.Drawables
- uid: System.Collections.Generic.List{DotFeather.IDrawable}
  commentId: T:System.Collections.Generic.List{DotFeather.IDrawable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IDrawable>
  nameWithType: List<IDrawable>
  fullName: System.Collections.Generic.List<DotFeather.IDrawable>
  nameWithType.vb: List(Of IDrawable)
  fullName.vb: System.Collections.Generic.List(Of DotFeather.IDrawable)
  name.vb: List(Of IDrawable)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DotFeather.IDrawable
    name: IDrawable
    nameWithType: IDrawable
    fullName: DotFeather.IDrawable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DotFeather.IDrawable
    name: IDrawable
    nameWithType: IDrawable
    fullName: DotFeather.IDrawable
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DotFeather.Graphic.Location*
  commentId: Overload:DotFeather.Graphic.Location
  name: Location
  nameWithType: Graphic.Location
  fullName: DotFeather.Graphic.Location
- uid: DotFeather.IDrawable.Location
  commentId: P:DotFeather.IDrawable.Location
  parent: DotFeather.IDrawable
  name: Location
  nameWithType: IDrawable.Location
  fullName: DotFeather.IDrawable.Location
- uid: DotFeather.Vector
  commentId: T:DotFeather.Vector
  parent: DotFeather
  name: Vector
  nameWithType: Vector
  fullName: DotFeather.Vector
- uid: DotFeather.Graphic.Angle*
  commentId: Overload:DotFeather.Graphic.Angle
  name: Angle
  nameWithType: Graphic.Angle
  fullName: DotFeather.Graphic.Angle
- uid: DotFeather.IDrawable.Angle
  commentId: P:DotFeather.IDrawable.Angle
  parent: DotFeather.IDrawable
  name: Angle
  nameWithType: IDrawable.Angle
  fullName: DotFeather.IDrawable.Angle
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: DotFeather.Graphic.Scale*
  commentId: Overload:DotFeather.Graphic.Scale
  name: Scale
  nameWithType: Graphic.Scale
  fullName: DotFeather.Graphic.Scale
- uid: DotFeather.IDrawable.Scale
  commentId: P:DotFeather.IDrawable.Scale
  parent: DotFeather.IDrawable
  name: Scale
  nameWithType: IDrawable.Scale
  fullName: DotFeather.IDrawable.Scale
- uid: DotFeather.Graphic.ZOrder*
  commentId: Overload:DotFeather.Graphic.ZOrder
  name: ZOrder
  nameWithType: Graphic.ZOrder
  fullName: DotFeather.Graphic.ZOrder
- uid: DotFeather.IDrawable.ZOrder
  commentId: P:DotFeather.IDrawable.ZOrder
  parent: DotFeather.IDrawable
  name: ZOrder
  nameWithType: IDrawable.ZOrder
  fullName: DotFeather.IDrawable.ZOrder
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DotFeather.Graphic.Name*
  commentId: Overload:DotFeather.Graphic.Name
  name: Name
  nameWithType: Graphic.Name
  fullName: DotFeather.Graphic.Name
- uid: DotFeather.IDrawable.Name
  commentId: P:DotFeather.IDrawable.Name
  parent: DotFeather.IDrawable
  name: Name
  nameWithType: IDrawable.Name
  fullName: DotFeather.IDrawable.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DotFeather.Graphic.Draw*
  commentId: Overload:DotFeather.Graphic.Draw
  name: Draw
  nameWithType: Graphic.Draw
  fullName: DotFeather.Graphic.Draw
- uid: DotFeather.IDrawable.Draw(DotFeather.GameBase,DotFeather.Vector)
  commentId: M:DotFeather.IDrawable.Draw(DotFeather.GameBase,DotFeather.Vector)
  parent: DotFeather.IDrawable
  name: Draw(GameBase, Vector)
  nameWithType: IDrawable.Draw(GameBase, Vector)
  fullName: DotFeather.IDrawable.Draw(DotFeather.GameBase, DotFeather.Vector)
  spec.csharp:
  - uid: DotFeather.IDrawable.Draw(DotFeather.GameBase,DotFeather.Vector)
    name: Draw
    nameWithType: IDrawable.Draw
    fullName: DotFeather.IDrawable.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: DotFeather.GameBase
    name: GameBase
    nameWithType: GameBase
    fullName: DotFeather.GameBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotFeather.Vector
    name: Vector
    nameWithType: Vector
    fullName: DotFeather.Vector
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotFeather.IDrawable.Draw(DotFeather.GameBase,DotFeather.Vector)
    name: Draw
    nameWithType: IDrawable.Draw
    fullName: DotFeather.IDrawable.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: DotFeather.GameBase
    name: GameBase
    nameWithType: GameBase
    fullName: DotFeather.GameBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotFeather.Vector
    name: Vector
    nameWithType: Vector
    fullName: DotFeather.Vector
  - name: )
    nameWithType: )
    fullName: )
- uid: DotFeather.GameBase
  commentId: T:DotFeather.GameBase
  parent: DotFeather
  name: GameBase
  nameWithType: GameBase
  fullName: DotFeather.GameBase
- uid: DotFeather.Graphic.Pixel*
  commentId: Overload:DotFeather.Graphic.Pixel
  name: Pixel
  nameWithType: Graphic.Pixel
  fullName: DotFeather.Graphic.Pixel
- uid: System.Drawing.Point
  commentId: T:System.Drawing.Point
  parent: System.Drawing
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point
- uid: System.Drawing.Color
  commentId: T:System.Drawing.Color
  parent: System.Drawing
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
- uid: DotFeather.Graphic.Line*
  commentId: Overload:DotFeather.Graphic.Line
  name: Line
  nameWithType: Graphic.Line
  fullName: DotFeather.Graphic.Line
- uid: DotFeather.Graphic.Rect*
  commentId: Overload:DotFeather.Graphic.Rect
  name: Rect
  nameWithType: Graphic.Rect
  fullName: DotFeather.Graphic.Rect
- uid: System.Nullable{System.Drawing.Color}
  commentId: T:System.Nullable{System.Drawing.Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<System.Drawing.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of System.Drawing.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Drawing.Color
    name: Color
    nameWithType: Color
    fullName: System.Drawing.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Drawing.Color
    name: Color
    nameWithType: Color
    fullName: System.Drawing.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotFeather.Graphic.Triangle*
  commentId: Overload:DotFeather.Graphic.Triangle
  name: Triangle
  nameWithType: Graphic.Triangle
  fullName: DotFeather.Graphic.Triangle
- uid: DotFeather.Graphic.Ellipse*
  commentId: Overload:DotFeather.Graphic.Ellipse
  name: Ellipse
  nameWithType: Graphic.Ellipse
  fullName: DotFeather.Graphic.Ellipse
- uid: DotFeather.Graphic.Texture*
  commentId: Overload:DotFeather.Graphic.Texture
  name: Texture
  nameWithType: Graphic.Texture
  fullName: DotFeather.Graphic.Texture
- uid: DotFeather.Texture2D
  commentId: T:DotFeather.Texture2D
  parent: DotFeather
  name: Texture2D
  nameWithType: Texture2D
  fullName: DotFeather.Texture2D
- uid: DotFeather.Graphic.Clear*
  commentId: Overload:DotFeather.Graphic.Clear
  name: Clear
  nameWithType: Graphic.Clear
  fullName: DotFeather.Graphic.Clear
- uid: DotFeather.Graphic.Destroy*
  commentId: Overload:DotFeather.Graphic.Destroy
  name: Destroy
  nameWithType: Graphic.Destroy
  fullName: DotFeather.Graphic.Destroy
- uid: DotFeather.IDrawable.Destroy
  commentId: M:DotFeather.IDrawable.Destroy
  parent: DotFeather.IDrawable
  name: Destroy()
  nameWithType: IDrawable.Destroy()
  fullName: DotFeather.IDrawable.Destroy()
  spec.csharp:
  - uid: DotFeather.IDrawable.Destroy
    name: Destroy
    nameWithType: IDrawable.Destroy
    fullName: DotFeather.IDrawable.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotFeather.IDrawable.Destroy
    name: Destroy
    nameWithType: IDrawable.Destroy
    fullName: DotFeather.IDrawable.Destroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
