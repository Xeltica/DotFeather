### YamlMime:ManagedReference
items:
- uid: DotFeather.Texture2D
  commentId: T:DotFeather.Texture2D
  id: Texture2D
  parent: DotFeather
  children:
  - DotFeather.Texture2D.#ctor(System.Int32,System.Drawing.Size)
  - DotFeather.Texture2D.Dispose
  - DotFeather.Texture2D.Handle
  - DotFeather.Texture2D.LoadAndSplitFrom(System.String,System.Int32,System.Int32,System.Drawing.Size)
  - DotFeather.Texture2D.LoadFrom(System.Drawing.Imaging.BitmapData)
  - DotFeather.Texture2D.LoadFrom(System.String)
  - DotFeather.Texture2D.Size
  langs:
  - csharp
  - vb
  name: Texture2D
  nameWithType: Texture2D
  fullName: DotFeather.Texture2D
  type: Struct
  source:
    remote:
      path: DotFeather/Models/Texture2D.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: Texture2D
    path: ../DotFeather/Models/Texture2D.cs
    startLine: 11
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nテクスチャのハンドルを持ちます。\n"
  example: []
  syntax:
    content: 'public struct Texture2D : IDisposable'
    content.vb: >-
      Public Structure Texture2D

          Implements IDisposable
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: DotFeather.Texture2D.Handle
  commentId: P:DotFeather.Texture2D.Handle
  id: Handle
  parent: DotFeather.Texture2D
  langs:
  - csharp
  - vb
  name: Handle
  nameWithType: Texture2D.Handle
  fullName: DotFeather.Texture2D.Handle
  type: Property
  source:
    remote:
      path: DotFeather/Models/Texture2D.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: Handle
    path: ../DotFeather/Models/Texture2D.cs
    startLine: 16
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nこのテクスチャの OpenGL ハンドルを取得します。\n"
  example: []
  syntax:
    content: public int Handle { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Handle As Integer
  overload: DotFeather.Texture2D.Handle*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotFeather.Texture2D.Size
  commentId: P:DotFeather.Texture2D.Size
  id: Size
  parent: DotFeather.Texture2D
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: Texture2D.Size
  fullName: DotFeather.Texture2D.Size
  type: Property
  source:
    remote:
      path: DotFeather/Models/Texture2D.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: Size
    path: ../DotFeather/Models/Texture2D.cs
    startLine: 21
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nこのテクスチャのサイズを取得します。\n"
  example: []
  syntax:
    content: public Size Size { get; }
    parameters: []
    return:
      type: System.Drawing.Size
    content.vb: Public ReadOnly Property Size As Size
  overload: DotFeather.Texture2D.Size*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotFeather.Texture2D.#ctor(System.Int32,System.Drawing.Size)
  commentId: M:DotFeather.Texture2D.#ctor(System.Int32,System.Drawing.Size)
  id: '#ctor(System.Int32,System.Drawing.Size)'
  parent: DotFeather.Texture2D
  langs:
  - csharp
  - vb
  name: Texture2D(Int32, Size)
  nameWithType: Texture2D.Texture2D(Int32, Size)
  fullName: DotFeather.Texture2D.Texture2D(System.Int32, System.Drawing.Size)
  type: Constructor
  source:
    remote:
      path: DotFeather/Models/Texture2D.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: .ctor
    path: ../DotFeather/Models/Texture2D.cs
    startLine: 28
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nハンドルとサイズを指定して、 <xref href=\"DotFeather.Texture2D\" data-throw-if-not-resolved=\"false\"></xref> クラスの新しいインスタンスを初期化します。\n"
  example: []
  syntax:
    content: public Texture2D(int handle, Size size)
    parameters:
    - id: handle
      type: System.Int32
      description: ''
    - id: size
      type: System.Drawing.Size
      description: ''
    content.vb: Public Sub New(handle As Integer, size As Size)
  overload: DotFeather.Texture2D.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotFeather.Texture2D.LoadFrom(System.String)
  commentId: M:DotFeather.Texture2D.LoadFrom(System.String)
  id: LoadFrom(System.String)
  parent: DotFeather.Texture2D
  langs:
  - csharp
  - vb
  name: LoadFrom(String)
  nameWithType: Texture2D.LoadFrom(String)
  fullName: DotFeather.Texture2D.LoadFrom(System.String)
  type: Method
  source:
    remote:
      path: DotFeather/Models/Texture2D.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: LoadFrom
    path: ../DotFeather/Models/Texture2D.cs
    startLine: 39
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n画像ファイルを読み込みます。\n"
  example: []
  syntax:
    content: public static Texture2D LoadFrom(string path)
    parameters:
    - id: path
      type: System.String
      description: ファイルパス。
    return:
      type: DotFeather.Texture2D
      description: 読み込んだ画像のデータ。
    content.vb: Public Shared Function LoadFrom(path As String) As Texture2D
  overload: DotFeather.Texture2D.LoadFrom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotFeather.Texture2D.LoadFrom(System.Drawing.Imaging.BitmapData)
  commentId: M:DotFeather.Texture2D.LoadFrom(System.Drawing.Imaging.BitmapData)
  id: LoadFrom(System.Drawing.Imaging.BitmapData)
  parent: DotFeather.Texture2D
  langs:
  - csharp
  - vb
  name: LoadFrom(BitmapData)
  nameWithType: Texture2D.LoadFrom(BitmapData)
  fullName: DotFeather.Texture2D.LoadFrom(System.Drawing.Imaging.BitmapData)
  type: Method
  source:
    remote:
      path: DotFeather/Models/Texture2D.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: LoadFrom
    path: ../DotFeather/Models/Texture2D.cs
    startLine: 50
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nテクスチャを登録し、ハンドルを返します。\n"
  example: []
  syntax:
    content: public static Texture2D LoadFrom(BitmapData bmp)
    parameters:
    - id: bmp
      type: System.Drawing.Imaging.BitmapData
    return:
      type: DotFeather.Texture2D
    content.vb: Public Shared Function LoadFrom(bmp As BitmapData) As Texture2D
  overload: DotFeather.Texture2D.LoadFrom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotFeather.Texture2D.LoadAndSplitFrom(System.String,System.Int32,System.Int32,System.Drawing.Size)
  commentId: M:DotFeather.Texture2D.LoadAndSplitFrom(System.String,System.Int32,System.Int32,System.Drawing.Size)
  id: LoadAndSplitFrom(System.String,System.Int32,System.Int32,System.Drawing.Size)
  parent: DotFeather.Texture2D
  langs:
  - csharp
  - vb
  name: LoadAndSplitFrom(String, Int32, Int32, Size)
  nameWithType: Texture2D.LoadAndSplitFrom(String, Int32, Int32, Size)
  fullName: DotFeather.Texture2D.LoadAndSplitFrom(System.String, System.Int32, System.Int32, System.Drawing.Size)
  type: Method
  source:
    remote:
      path: DotFeather/Models/Texture2D.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: LoadAndSplitFrom
    path: ../DotFeather/Models/Texture2D.cs
    startLine: 69
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\n画像ファイルを読み込み、指定したサイズで左上から順番に切り取ります。\n"
  example: []
  syntax:
    content: public static Texture2D[] LoadAndSplitFrom(string path, int horizonalCount, int verticalCount, Size sizeOfCroppedImage)
    parameters:
    - id: path
      type: System.String
      description: 画像のファイルパス。
    - id: horizonalCount
      type: System.Int32
      description: 横方向の画像の枚数。
    - id: verticalCount
      type: System.Int32
      description: 盾向の画像の枚数。
    - id: sizeOfCroppedImage
      type: System.Drawing.Size
      description: 画像1枚分のサイズ。
    return:
      type: DotFeather.Texture2D[]
      description: 切り取られた全ての画像データ。
    content.vb: Public Shared Function LoadAndSplitFrom(path As String, horizonalCount As Integer, verticalCount As Integer, sizeOfCroppedImage As Size) As Texture2D()
  overload: DotFeather.Texture2D.LoadAndSplitFrom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotFeather.Texture2D.Dispose
  commentId: M:DotFeather.Texture2D.Dispose
  id: Dispose
  parent: DotFeather.Texture2D
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Texture2D.Dispose()
  fullName: DotFeather.Texture2D.Dispose()
  type: Method
  source:
    remote:
      path: DotFeather/Models/Texture2D.cs
      branch: develop
      repo: https://github.com/xeltica/dotfeather
    id: Dispose
    path: ../DotFeather/Models/Texture2D.cs
    startLine: 100
  assemblies:
  - DotFeather
  namespace: DotFeather
  summary: "\nこの <xref href=\"DotFeather.Texture2D\" data-throw-if-not-resolved=\"false\"></xref> を破棄します。\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: DotFeather.Texture2D.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: DotFeather
  commentId: N:DotFeather
  name: DotFeather
  nameWithType: DotFeather
  fullName: DotFeather
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DotFeather.Texture2D.Handle*
  commentId: Overload:DotFeather.Texture2D.Handle
  name: Handle
  nameWithType: Texture2D.Handle
  fullName: DotFeather.Texture2D.Handle
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DotFeather.Texture2D.Size*
  commentId: Overload:DotFeather.Texture2D.Size
  name: Size
  nameWithType: Texture2D.Size
  fullName: DotFeather.Texture2D.Size
- uid: System.Drawing.Size
  commentId: T:System.Drawing.Size
  parent: System.Drawing
  isExternal: true
  name: Size
  nameWithType: Size
  fullName: System.Drawing.Size
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
- uid: DotFeather.Texture2D
  commentId: T:DotFeather.Texture2D
  parent: DotFeather
  name: Texture2D
  nameWithType: Texture2D
  fullName: DotFeather.Texture2D
- uid: DotFeather.Texture2D.#ctor*
  commentId: Overload:DotFeather.Texture2D.#ctor
  name: Texture2D
  nameWithType: Texture2D.Texture2D
  fullName: DotFeather.Texture2D.Texture2D
- uid: DotFeather.Texture2D.LoadFrom*
  commentId: Overload:DotFeather.Texture2D.LoadFrom
  name: LoadFrom
  nameWithType: Texture2D.LoadFrom
  fullName: DotFeather.Texture2D.LoadFrom
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Drawing.Imaging.BitmapData
  commentId: T:System.Drawing.Imaging.BitmapData
  parent: System.Drawing.Imaging
  isExternal: true
  name: BitmapData
  nameWithType: BitmapData
  fullName: System.Drawing.Imaging.BitmapData
- uid: System.Drawing.Imaging
  commentId: N:System.Drawing.Imaging
  isExternal: true
  name: System.Drawing.Imaging
  nameWithType: System.Drawing.Imaging
  fullName: System.Drawing.Imaging
- uid: DotFeather.Texture2D.LoadAndSplitFrom*
  commentId: Overload:DotFeather.Texture2D.LoadAndSplitFrom
  name: LoadAndSplitFrom
  nameWithType: Texture2D.LoadAndSplitFrom
  fullName: DotFeather.Texture2D.LoadAndSplitFrom
- uid: DotFeather.Texture2D[]
  isExternal: true
  name: Texture2D[]
  nameWithType: Texture2D[]
  fullName: DotFeather.Texture2D[]
  nameWithType.vb: Texture2D()
  fullName.vb: DotFeather.Texture2D()
  name.vb: Texture2D()
  spec.csharp:
  - uid: DotFeather.Texture2D
    name: Texture2D
    nameWithType: Texture2D
    fullName: DotFeather.Texture2D
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: DotFeather.Texture2D
    name: Texture2D
    nameWithType: Texture2D
    fullName: DotFeather.Texture2D
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: DotFeather.Texture2D.Dispose*
  commentId: Overload:DotFeather.Texture2D.Dispose
  name: Dispose
  nameWithType: Texture2D.Dispose
  fullName: DotFeather.Texture2D.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
